package io.mattw.youtube.commentsuite.db;

import com.google.api.services.youtube.model.ResourceId;
import javafx.scene.image.Image;
import io.mattw.youtube.commentsuite.ImageCache;

/**
 * Similarities between GroupItem, YouTubeChannel, YouTubeComment, and YouTubeVideo.
 *
 * @since 2018-12-30
 * @author mattwright324
 */
public abstract class YouTubeObject implements ImageCache {

    private YType typeId;
    private String youtubeId;
    private String title;
    private String thumbUrl;
    private boolean fetchThumb;

    /**
     * This field differs from what's returned by  {@link #buildYouTubeLink()} because it is used solely by
     * {@link GroupItem} as part of field duplication.
     */
    private String youTubeLink;

    public YouTubeObject() {
        typeId = YType.UNKNOWN;
    }

    public YouTubeObject(String youtubeId, String title, String thumbUrl, boolean fetchThumb) {
        this();
        this.youtubeId = youtubeId;
        this.title = title;
        this.thumbUrl = thumbUrl;
        this.fetchThumb = fetchThumb;
    }

    public YouTubeObject(ResourceId youtubeId, String title, String thumbUrl, boolean fetchThumb) {
        this();
        this.youtubeId = getId(youtubeId);
        this.title = title;
        this.thumbUrl = thumbUrl;
        this.fetchThumb = fetchThumb;
    }

    public YType getTypeId() {
        return typeId;
    }

    public void setTypeId(YType typeId) {
        this.typeId = typeId;
    }

    public String getYoutubeId() {
        return youtubeId;
    }

    public void setYoutubeId(String youtubeId) {
        this.youtubeId = youtubeId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getThumbUrl() {
        return thumbUrl;
    }

    public void setThumbUrl(String thumbUrl) {
        this.thumbUrl = thumbUrl;
    }

    public boolean isFetchThumb() {
        return fetchThumb;
    }

    public void setFetchThumb(boolean fetchThumb) {
        this.fetchThumb = fetchThumb;
    }

    public String getYouTubeLink() {
        return youTubeLink;
    }

    public void setYouTubeLink(String youTubeLink) {
        this.youTubeLink = youTubeLink;
    }

    public String getTypeName() {
        return typeId.getDisplay();
    }

    /**
     * The Default Thumb is a letter avatar generated by the first character in the {@link #title}.
     *
     * Since the default thumb is generated, there is no load time compared to the loading
     * of a new Image(thumbUrl);
     *
     * The actual thumb can be loaded separately in a temporary thread and replace this
     * default thumbnail.
     *
     * @return letter avatar image of first char of {@link #title}
     */
    public Image getDefaultThumb() {
        return ImageCache.toLetterAvatar(this);
    }

    /**
     * Returns a full youtube link for videos, channels, playlists, and comments.
     *
     * @return full youtube link for the associated object's type
     */
    public String buildYouTubeLink() {
        switch(typeId){
            case VIDEO:    return "https://youtu.be/" + youtubeId;
            case CHANNEL:  return "https://www.youtube.com/channel/" + youtubeId;
            case PLAYLIST: return "https://www.youtube.com/playlist?list=" + youtubeId;
            case COMMENT:  return "https://www.youtube.com/watch?v=" +
                            (this instanceof YouTubeComment ? ((YouTubeComment) this).getVideoId() +
                            "&lc="+youtubeId : youtubeId);
            default:       return "https://www.youtube.com/error/" + youtubeId;
        }
    }

    public String toString() {
        return getYoutubeId();
    }

    public boolean equals(Object o) {
        return o instanceof YouTubeObject && ((YouTubeObject) o).getYoutubeId() != null && ((YouTubeObject) o).getYoutubeId().equals(youtubeId);
    }

    public String getId(ResourceId resourceId) {
        if(resourceId.getVideoId() != null) {
            return resourceId.getVideoId();
        } else if(resourceId.getChannelId() != null) {
            return resourceId.getChannelId();
        } else if(resourceId.getPlaylistId() != null) {
            return resourceId.getPlaylistId();
        }
        return null;
    }
}
