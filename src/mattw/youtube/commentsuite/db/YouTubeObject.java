package mattw.youtube.commentsuite.db;

import javafx.scene.image.Image;
import mattw.youtube.commentsuite.LetterAvatar;
import java.util.HashMap;
import java.util.Map;

/**
 * Similarities between GroupItem, YouTubeChannel, YouTubeComment, and YouTubeVideo.
 */
public abstract class YouTubeObject {

    private static Map<Character,Image> letterAvatars = new HashMap<>();

    private YType typeId;
    private String youtubeId;
    private String title;
    private String thumbUrl;
    private boolean fetchThumb;

    private String youtubeLink;
    private String typeName;

    public YouTubeObject() {
        typeId = YType.UNKNOWN;
    }

    public YouTubeObject(String youtubeId, String title, String thumbUrl, boolean fetchThumb) {
        this();
        this.youtubeId = youtubeId;
        this.title = title;
        this.thumbUrl = thumbUrl;
        this.fetchThumb = fetchThumb;
    }

    public YType getTypeId() {
        return typeId;
    }

    public void setTypeId(YType typeId) {
        this.typeId = typeId;
    }

    public String getYoutubeId() {
        return youtubeId;
    }

    public void setYoutubeId(String youtubeId) {
        this.youtubeId = youtubeId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getThumbUrl() {
        return thumbUrl;
    }

    public void setThumbUrl(String thumbUrl) {
        this.thumbUrl = thumbUrl;
    }

    public boolean isFetchThumb() {
        return fetchThumb;
    }

    public void setFetchThumb(boolean fetchThumb) {
        this.fetchThumb = fetchThumb;
    }

    public String getYoutubeLink() {
        return youtubeLink;
    }

    public void setYoutubeLink(String youtubeLink) {
        this.youtubeLink = youtubeLink;
    }

    public String getTypeName() {
        return typeName;
    }

    public void setTypeName(String typeName) {
        this.typeName = typeName;
    }

    /**
     * The Default Thumb is a letter avatar generated by the first character in the title.
     *
     * Since the default thumb is generated, there is no load time compared to the loading
     * of a new Image(thumbUrl);
     *
     * The actual thumb can be loaded separately in a temporary thread and replace this
     * default thumbnail.
     * @return
     */
    public Image getDefaultThumb() {
        char letter = getTitle().charAt(0);
        Image letterAvatar;
        if(letterAvatars.containsKey(letter)) {
            letterAvatar = letterAvatars.get(letter);
        } else {
            letterAvatar = new LetterAvatar(letter);
            letterAvatars.put(letter, letterAvatar);
        }
        return letterAvatar;
    }

    /*public String getYouTubeLink() {
        switch(typeId){
            case 0:  return "https://youtu.be/"+youtubeId;
            case 1:  return "https://www.youtube.com/channel/"+youtubeId;
            case 2:  return "https://www.youtube.com/playlist?list="+youtubeId;
            case 3:  return "https://www.youtube.com/watch?v="+(this instanceof YouTubeComment ? ((YouTubeComment) this).getVideoId()+"&lc="+youtubeId : youtubeId);
            default: return "https://www.youtube.com/error/"+youtubeId;
        }
    }

    public String getTypeName() {
        switch(typeId) {
            case 0: return "Video";
            case 1: return "Channel";
            case 2: return "Playlist";
            case 3: return "Comment";
            default: return "Error";
        }
    }*/

    public String toString() {
        return getYoutubeId();
    }

    public boolean equals(Object o) {
        return o instanceof YouTubeObject && ((YouTubeObject) o).getYoutubeId() != null && ((YouTubeObject) o).getYoutubeId().equals(youtubeId);
    }
}
